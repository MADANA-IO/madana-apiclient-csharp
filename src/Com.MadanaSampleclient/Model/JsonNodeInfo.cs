/* 
 * madana-api
 *
 * <h1>API Quickstart Guide</h1>        <p>This documentation contains a Quickstart Guide, a few <a href=\"downloads.html\">sample clients</a>  for download and information about the available  <a href=\"resources.html\">endpoints</a>  and  <a href=\"data.html\">DataTypes</a>  </p>     <p>The <a target=\"_blank\" href=\"http://madana-explorer-staging.eu-central-1.elasticbeanstalk.com/login\">  MADANA Explorer</a> can be used to verify the interactions with the API</p>           <p>Internal use only. For more information visit <a href=\"https://www.madana.io\">www.madana.io</a></p>         <br> <br>
 *
 * The version of the OpenAPI document: 0.4.12
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.MadanaSampleclient.Client.OpenAPIDateConverter;

namespace Com.MadanaSampleclient.Model
{
    /// <summary>
    /// JsonNodeInfo
    /// </summary>
    [DataContract]
    public partial class JsonNodeInfo :  IEquatable<JsonNodeInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonNodeInfo" /> class.
        /// </summary>
        /// <param name="hardwareBaseboard">hardwareBaseboard.</param>
        /// <param name="publicKey">publicKey.</param>
        /// <param name="memory">memory.</param>
        /// <param name="processors">processors.</param>
        /// <param name="cpuLogicalCount">cpuLogicalCount.</param>
        /// <param name="connectionURL">connectionURL.</param>
        /// <param name="operatingSystem">operatingSystem.</param>
        /// <param name="cpuPhysicalCores">cpuPhysicalCores.</param>
        /// <param name="status">status.</param>
        /// <param name="operatingSystemUptime">operatingSystemUptime.</param>
        /// <param name="cpuModel">cpuModel.</param>
        /// <param name="owner">owner.</param>
        /// <param name="cpuFamily">cpuFamily.</param>
        /// <param name="cpuFrequency">cpuFrequency.</param>
        /// <param name="hardwareFirmware">hardwareFirmware.</param>
        public JsonNodeInfo(string hardwareBaseboard = default(string), string publicKey = default(string), string memory = default(string), List<string> processors = default(List<string>), int cpuLogicalCount = default(int), string connectionURL = default(string), string operatingSystem = default(string), int cpuPhysicalCores = default(int), string status = default(string), decimal operatingSystemUptime = default(decimal), string cpuModel = default(string), string owner = default(string), string cpuFamily = default(string), string cpuFrequency = default(string), string hardwareFirmware = default(string))
        {
            this.HardwareBaseboard = hardwareBaseboard;
            this.PublicKey = publicKey;
            this.Memory = memory;
            this.Processors = processors;
            this.CpuLogicalCount = cpuLogicalCount;
            this.ConnectionURL = connectionURL;
            this.OperatingSystem = operatingSystem;
            this.CpuPhysicalCores = cpuPhysicalCores;
            this.Status = status;
            this.OperatingSystemUptime = operatingSystemUptime;
            this.CpuModel = cpuModel;
            this.Owner = owner;
            this.CpuFamily = cpuFamily;
            this.CpuFrequency = cpuFrequency;
            this.HardwareFirmware = hardwareFirmware;
        }
        
        /// <summary>
        /// Gets or Sets HardwareBaseboard
        /// </summary>
        [DataMember(Name="hardwareBaseboard", EmitDefaultValue=false)]
        public string HardwareBaseboard { get; set; }

        /// <summary>
        /// Gets or Sets PublicKey
        /// </summary>
        [DataMember(Name="publicKey", EmitDefaultValue=false)]
        public string PublicKey { get; set; }

        /// <summary>
        /// Gets or Sets Memory
        /// </summary>
        [DataMember(Name="memory", EmitDefaultValue=false)]
        public string Memory { get; set; }

        /// <summary>
        /// Gets or Sets Processors
        /// </summary>
        [DataMember(Name="processors", EmitDefaultValue=false)]
        public List<string> Processors { get; set; }

        /// <summary>
        /// Gets or Sets CpuLogicalCount
        /// </summary>
        [DataMember(Name="cpuLogicalCount", EmitDefaultValue=false)]
        public int CpuLogicalCount { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionURL
        /// </summary>
        [DataMember(Name="connectionURL", EmitDefaultValue=false)]
        public string ConnectionURL { get; set; }

        /// <summary>
        /// Gets or Sets OperatingSystem
        /// </summary>
        [DataMember(Name="operatingSystem", EmitDefaultValue=false)]
        public string OperatingSystem { get; set; }

        /// <summary>
        /// Gets or Sets CpuPhysicalCores
        /// </summary>
        [DataMember(Name="cpuPhysicalCores", EmitDefaultValue=false)]
        public int CpuPhysicalCores { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets OperatingSystemUptime
        /// </summary>
        [DataMember(Name="operatingSystemUptime", EmitDefaultValue=false)]
        public decimal OperatingSystemUptime { get; set; }

        /// <summary>
        /// Gets or Sets CpuModel
        /// </summary>
        [DataMember(Name="cpuModel", EmitDefaultValue=false)]
        public string CpuModel { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public string Owner { get; set; }

        /// <summary>
        /// Gets or Sets CpuFamily
        /// </summary>
        [DataMember(Name="cpuFamily", EmitDefaultValue=false)]
        public string CpuFamily { get; set; }

        /// <summary>
        /// Gets or Sets CpuFrequency
        /// </summary>
        [DataMember(Name="cpuFrequency", EmitDefaultValue=false)]
        public string CpuFrequency { get; set; }

        /// <summary>
        /// Gets or Sets HardwareFirmware
        /// </summary>
        [DataMember(Name="hardwareFirmware", EmitDefaultValue=false)]
        public string HardwareFirmware { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JsonNodeInfo {\n");
            sb.Append("  HardwareBaseboard: ").Append(HardwareBaseboard).Append("\n");
            sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
            sb.Append("  Memory: ").Append(Memory).Append("\n");
            sb.Append("  Processors: ").Append(Processors).Append("\n");
            sb.Append("  CpuLogicalCount: ").Append(CpuLogicalCount).Append("\n");
            sb.Append("  ConnectionURL: ").Append(ConnectionURL).Append("\n");
            sb.Append("  OperatingSystem: ").Append(OperatingSystem).Append("\n");
            sb.Append("  CpuPhysicalCores: ").Append(CpuPhysicalCores).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  OperatingSystemUptime: ").Append(OperatingSystemUptime).Append("\n");
            sb.Append("  CpuModel: ").Append(CpuModel).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  CpuFamily: ").Append(CpuFamily).Append("\n");
            sb.Append("  CpuFrequency: ").Append(CpuFrequency).Append("\n");
            sb.Append("  HardwareFirmware: ").Append(HardwareFirmware).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JsonNodeInfo);
        }

        /// <summary>
        /// Returns true if JsonNodeInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of JsonNodeInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonNodeInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HardwareBaseboard == input.HardwareBaseboard ||
                    (this.HardwareBaseboard != null &&
                    this.HardwareBaseboard.Equals(input.HardwareBaseboard))
                ) && 
                (
                    this.PublicKey == input.PublicKey ||
                    (this.PublicKey != null &&
                    this.PublicKey.Equals(input.PublicKey))
                ) && 
                (
                    this.Memory == input.Memory ||
                    (this.Memory != null &&
                    this.Memory.Equals(input.Memory))
                ) && 
                (
                    this.Processors == input.Processors ||
                    this.Processors != null &&
                    input.Processors != null &&
                    this.Processors.SequenceEqual(input.Processors)
                ) && 
                (
                    this.CpuLogicalCount == input.CpuLogicalCount ||
                    (this.CpuLogicalCount != null &&
                    this.CpuLogicalCount.Equals(input.CpuLogicalCount))
                ) && 
                (
                    this.ConnectionURL == input.ConnectionURL ||
                    (this.ConnectionURL != null &&
                    this.ConnectionURL.Equals(input.ConnectionURL))
                ) && 
                (
                    this.OperatingSystem == input.OperatingSystem ||
                    (this.OperatingSystem != null &&
                    this.OperatingSystem.Equals(input.OperatingSystem))
                ) && 
                (
                    this.CpuPhysicalCores == input.CpuPhysicalCores ||
                    (this.CpuPhysicalCores != null &&
                    this.CpuPhysicalCores.Equals(input.CpuPhysicalCores))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.OperatingSystemUptime == input.OperatingSystemUptime ||
                    (this.OperatingSystemUptime != null &&
                    this.OperatingSystemUptime.Equals(input.OperatingSystemUptime))
                ) && 
                (
                    this.CpuModel == input.CpuModel ||
                    (this.CpuModel != null &&
                    this.CpuModel.Equals(input.CpuModel))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.CpuFamily == input.CpuFamily ||
                    (this.CpuFamily != null &&
                    this.CpuFamily.Equals(input.CpuFamily))
                ) && 
                (
                    this.CpuFrequency == input.CpuFrequency ||
                    (this.CpuFrequency != null &&
                    this.CpuFrequency.Equals(input.CpuFrequency))
                ) && 
                (
                    this.HardwareFirmware == input.HardwareFirmware ||
                    (this.HardwareFirmware != null &&
                    this.HardwareFirmware.Equals(input.HardwareFirmware))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HardwareBaseboard != null)
                    hashCode = hashCode * 59 + this.HardwareBaseboard.GetHashCode();
                if (this.PublicKey != null)
                    hashCode = hashCode * 59 + this.PublicKey.GetHashCode();
                if (this.Memory != null)
                    hashCode = hashCode * 59 + this.Memory.GetHashCode();
                if (this.Processors != null)
                    hashCode = hashCode * 59 + this.Processors.GetHashCode();
                if (this.CpuLogicalCount != null)
                    hashCode = hashCode * 59 + this.CpuLogicalCount.GetHashCode();
                if (this.ConnectionURL != null)
                    hashCode = hashCode * 59 + this.ConnectionURL.GetHashCode();
                if (this.OperatingSystem != null)
                    hashCode = hashCode * 59 + this.OperatingSystem.GetHashCode();
                if (this.CpuPhysicalCores != null)
                    hashCode = hashCode * 59 + this.CpuPhysicalCores.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.OperatingSystemUptime != null)
                    hashCode = hashCode * 59 + this.OperatingSystemUptime.GetHashCode();
                if (this.CpuModel != null)
                    hashCode = hashCode * 59 + this.CpuModel.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.CpuFamily != null)
                    hashCode = hashCode * 59 + this.CpuFamily.GetHashCode();
                if (this.CpuFrequency != null)
                    hashCode = hashCode * 59 + this.CpuFrequency.GetHashCode();
                if (this.HardwareFirmware != null)
                    hashCode = hashCode * 59 + this.HardwareFirmware.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

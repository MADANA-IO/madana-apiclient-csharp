/* 
 * madana-api
 *
 * <h1>API Quickstart Guide</h1>        <p>This documentation contains a Quickstart Guide, a few <a href=\"downloads.html\">sample clients</a>  for download and information about the available  <a href=\"resources.html\">endpoints</a>  and  <a href=\"data.html\">DataTypes</a>  </p>     <p>The <a target=\"_blank\" href=\"http://madana-explorer-staging.eu-central-1.elasticbeanstalk.com/login\">  MADANA Explorer</a> can be used to verify the interactions with the API</p>           <p>Internal use only. For more information visit <a href=\"https://www.madana.io\">www.madana.io</a></p>         <br> <br>
 *
 * The version of the OpenAPI document: 0.4.12
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.MadanaSampleclient.Client.OpenAPIDateConverter;

namespace Com.MadanaSampleclient.Model
{
    /// <summary>
    /// JsonAnalysisRequest
    /// </summary>
    [DataContract]
    public partial class JsonAnalysisRequest :  IEquatable<JsonAnalysisRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonAnalysisRequest" /> class.
        /// </summary>
        /// <param name="tokenAmount">tokenAmount.</param>
        /// <param name="treshold">treshold.</param>
        /// <param name="dataCollectionMethod">dataCollectionMethod.</param>
        /// <param name="dataCollectionConfig">dataCollectionConfig.</param>
        /// <param name="description">description.</param>
        public JsonAnalysisRequest(string tokenAmount = default(string), string treshold = default(string), string dataCollectionMethod = default(string), string dataCollectionConfig = default(string), string description = default(string))
        {
            this.TokenAmount = tokenAmount;
            this.Treshold = treshold;
            this.DataCollectionMethod = dataCollectionMethod;
            this.DataCollectionConfig = dataCollectionConfig;
            this.Description = description;
        }
        
        /// <summary>
        /// Gets or Sets TokenAmount
        /// </summary>
        [DataMember(Name="tokenAmount", EmitDefaultValue=false)]
        public string TokenAmount { get; set; }

        /// <summary>
        /// Gets or Sets Treshold
        /// </summary>
        [DataMember(Name="treshold", EmitDefaultValue=false)]
        public string Treshold { get; set; }

        /// <summary>
        /// Gets or Sets DataCollectionMethod
        /// </summary>
        [DataMember(Name="dataCollectionMethod", EmitDefaultValue=false)]
        public string DataCollectionMethod { get; set; }

        /// <summary>
        /// Gets or Sets DataCollectionConfig
        /// </summary>
        [DataMember(Name="dataCollectionConfig", EmitDefaultValue=false)]
        public string DataCollectionConfig { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JsonAnalysisRequest {\n");
            sb.Append("  TokenAmount: ").Append(TokenAmount).Append("\n");
            sb.Append("  Treshold: ").Append(Treshold).Append("\n");
            sb.Append("  DataCollectionMethod: ").Append(DataCollectionMethod).Append("\n");
            sb.Append("  DataCollectionConfig: ").Append(DataCollectionConfig).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JsonAnalysisRequest);
        }

        /// <summary>
        /// Returns true if JsonAnalysisRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of JsonAnalysisRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JsonAnalysisRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TokenAmount == input.TokenAmount ||
                    (this.TokenAmount != null &&
                    this.TokenAmount.Equals(input.TokenAmount))
                ) && 
                (
                    this.Treshold == input.Treshold ||
                    (this.Treshold != null &&
                    this.Treshold.Equals(input.Treshold))
                ) && 
                (
                    this.DataCollectionMethod == input.DataCollectionMethod ||
                    (this.DataCollectionMethod != null &&
                    this.DataCollectionMethod.Equals(input.DataCollectionMethod))
                ) && 
                (
                    this.DataCollectionConfig == input.DataCollectionConfig ||
                    (this.DataCollectionConfig != null &&
                    this.DataCollectionConfig.Equals(input.DataCollectionConfig))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenAmount != null)
                    hashCode = hashCode * 59 + this.TokenAmount.GetHashCode();
                if (this.Treshold != null)
                    hashCode = hashCode * 59 + this.Treshold.GetHashCode();
                if (this.DataCollectionMethod != null)
                    hashCode = hashCode * 59 + this.DataCollectionMethod.GetHashCode();
                if (this.DataCollectionConfig != null)
                    hashCode = hashCode * 59 + this.DataCollectionConfig.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
